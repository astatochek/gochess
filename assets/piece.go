package assets

import (
	"github.com/notnil/chess"
)

const (
	linesPerPieceVert      = 24
	rows              int8 = 8
	cols              int8 = 8
)

type pieceAsset [linesPerPieceVert]string

var blank = map[chess.Color]pieceAsset{
	chess.Black: {
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
		"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
	},
	chess.White: {
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
		"[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
	},
}

// Cell color, Piece color
var pieceAssets = map[chess.Color]map[chess.Color]map[chess.PieceType]pieceAsset{
	chess.White: {
		chess.Black: {
			chess.Pawn: pieceAsset{
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>><[#})>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>@@#@@@@@@<>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>@#@@@@@@@@@)>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>{@@@@@@@@@@@@>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>[@@@@@@@@@@@@>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>@@@@@@@@@@@>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>[@@@@@@@@@@>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>#@%%@@@@@@@@@@@>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>><@@@@@@@@@@@@@[>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>)@@@@@@@#>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>@@@@@@@@@<>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>><@#@@@@@@@@@[>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>(@@#@@@@@@@@@@@@{>>>>>>>>>>>>>",
				"(>>>>>>>>>>>(@##%@@@@@@@@@@@@@@@@>>>>>>>>>>>",
				"(>>>>>>>>>>]@#@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>",
				"(>>>>>>>>>>@%@@@@@@@@@@@@@@@@@@@@@<>>>>>>>>>",
				"(>>>>>>>>>>@@@@@@@@@@@@@@@@@@@@@@@[>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
				"(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
			},
		},
		chess.NoColor: {
			chess.NoPieceType: blank[chess.White],
		},
	},
	chess.Black: {
		chess.Black: {
			chess.Pawn: {
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{#@@%{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{#@@%@@@@@@{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{%@#@@@@@@@@@{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{@#@@@@@@@@@@#{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{@@@@@@@@@@@@#{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{#@@@@@@@@@@@{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{@@@@@@@@@@#{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{@@%@@@@@@@@@@@#{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{@@@@@@@@@@@@@@{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{@@@@@@@@{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{%@@@@@@@@@{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{@@%@@@@@@@@@{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{@@##@@@@@@@@@@@@#{{{{{{{{{{{{{",
				"{{{{{{{{{{{{@@##@@@@@@@@@@@@@@@@#{{{{{{{{{{{",
				"{{{{{{{{{{{@%%@@@@@@@@@@@@@@@@@@@#{{{{{{{{{{",
				"{{{{{{{{{{#@@@@@@@@@@@@@@@@@@@@@@@{{{{{{{{{{",
				"{{{{{{{{{{@@@@@@@@@@@@@@@@@@@@@@@@{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
				"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{",
			},
		},
		chess.NoColor: {
			chess.NoPieceType: blank[chess.Black],
		},
	},
}

func DrawBoard(board *chess.Board) string {
	out := ""
	for row := range rows {
		rowPieces := make([]pieceAsset, cols)
		for col := range cols {
			sq := chess.Square(row*cols + col)
			piece := board.Piece(sq)

			sqColor := chess.White
			if (row%2 == 0) != (col%2 == 1) {
				sqColor = chess.Black
			}

			sqAsset, ok := pieceAssets[sqColor][piece.Color()][piece.Type()]

			if ok {
				rowPieces[col] = sqAsset
			} else {
				rowPieces[col] = pieceAssets[sqColor][chess.NoColor][chess.NoPieceType]
			}
		}
		for line := range linesPerPieceVert {
			for _, rowPiece := range rowPieces {
				out += rowPiece[line]
			}
			out += "\n"
		}
	}
	return out
}
